<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    
	<!-- interceptors -->
    <mvc:interceptors >    
        <mvc:interceptor>    
            <mvc:mapping path="/admin/*" />
            <mvc:mapping path="/fund/*"/>    
            <mvc:mapping path="/entry"/>
            <bean class="deep.admin.interceptor.SessionInterceptor"></bean>    
        </mvc:interceptor>    
    </mvc:interceptors>
	
	<!-- 默认的注解映射的支持: 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->  
	<mvc:annotation-driven />
	
	<!--启用包自动扫描: 可以使用正则表达式或者注解来过滤包含或排除
		以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean 
		常用的注解有:
		@Controller			声明Action组件
		@Service			声明Service组件
		@Repository			声明Dao组件
		@Component			泛指组件，当无法明确分类时
		@RequestMapping		请求映射，如RequestMapping("/menu");
		@Resource			用于注入，(J2EE 提供的)默认按明称装配，
		
	-->  
	<context:component-scan base-package="deep.admin.controller,deep.fund.controller">
	<!--
	<context:include-filter type="regex" expression="tk\.deep\..*\.web\.action\..*Action"/>
	<context:include-filter type="regex" expression="tk\.deep\..*\.service\..*ServiceImpl"/>
	<context:include-filter type="regex" expression="tk\.deep\..*\.dao\..*DAO"/>
	<context:exclude-filter type="annotation" expression="tttt"/> -->
	</context:component-scan>
	
	<!-- 
		会把"/**" url,注册到SimpleUrlHandlerMapping的urlMap中,把对静态资源的访问由HandlerMapping
		转到 org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler处理并返回
		DefaultServletHttpRequestHandler使用就是各个Servlet容器自己的默认Servlet. 
	-->
	<mvc:default-servlet-handler/> 
	
	<!-- 静态文件的处理 -->
	<mvc:resources location="/static/" mapping="/static/**" />
	
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/v/" />
		<property name="suffix" value=".jsp" />
	</bean>

</beans> 