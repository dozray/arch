<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 					http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/security 
                        http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<!--登录页面不过滤 -->
	<http pattern="/login.jsp" security="none"/>
	<!-- 添加支持annotation -->
	<global-method-security secured-annotations="enabled"/>
	<http auto-config="true" use-expressions="true" access-denied-page="/accessDenied.jsp">
		<form-login  login-page="/login.jsp" default-target-url='/index.jsp'
			always-use-default-target="true" authentication-failure-url="/login.jsp?login_error=1" />
		<!-- <intercept-url pattern="/j_spring_security_check" access="IS_AUTHENTICATED_ANONYMOUSLY"/> -->
		<session-management>
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="false"/>
		</session-management>
		<!--增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，
		这个filter位于FILTER_SECURITY_INTERCEPTOR之前  -->
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		<session-management
			session-authentication-strategy-ref="sas" />
	</http>
	<beans:bean id="sas"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry"
			ref="sessionRegistry" />
		<beans:property name="maximumSessions" value="1" />
		<!-- 防止session攻击 -->
		<beans:property name="alwaysCreateSession" value="true" />
		<beans:property name="migrateSessionAttributes" value="false" />
		<!--  同一个帐号 同时只能一个人登录 -->
		<beans:property name="exceptionIfMaximumExceeded"
			value="false" />
	</beans:bean>
	<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />
	<!--
		事件监听:实现了
		ApplicationListener监听接口，包括AuthenticationCredentialsNotFoundEvent 事件，
		AuthorizationFailureEvent事件，AuthorizedEvent事件， PublicInvocationEvent事件
	-->
	<beans:bean
		class="org.springframework.security.authentication.event.LoggerListener" />
	
	<!--一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
	我们的所有控制将在这三个类中实现，解释详见具体配置  -->
	<beans:bean id="myFilter" class="security.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager"/>
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"/>
		<beans:property name="securityMetadataSource" ref="securityMetadataSource"/>
	</beans:bean>
	
	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 --><!-- 也可以使用角色继承 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
			<!-- <password-encoder hash="md5" ref="passwordEncoder"></password-encoder> -->
		</authentication-provider>
		<!-- 单点登录
		<authentication-provider ref="casAuthenticationProvider"/> -->
	</authentication-manager>
	
	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<beans:bean id="myUserDetailService" class="security.MyUserDetailService">
		<beans:property name="userInfoBiz" ref="userInfoBiz"></beans:property>
	</beans:bean>
	
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManagerBean" class="security.MyAccessDecisionManagerBean"/>
	
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问     -->
	<beans:bean id="securityMetadataSource" class="security.MyInvocationSecurityMetadataSource">
		<beans:constructor-arg name="userPowerBiz" ref="userPowerBiz"></beans:constructor-arg>
	</beans:bean>
	<!-- 用户的密码加密或解密 -->
	<beans:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
</beans:beans>
